#include <iostream>
using namespace std;

int motion_mg[141][2] = {
    {0, 1500},
    {90, 3000},
    {0, 4500},
    {180, 7500},
    {0, 9000},
    {180, 10500},
    {90, 12000},
    {180, 13500},
    {0, 16500},
    {180, 18000},
    {0, 19500},
    {90, 21000},
    {0, 22500},
    {180, 25500},
    {0, 28500},
    {180, 31500},
    {90, 33000},
    {180, 34500},
    {0, 37500},
    {180, 40500},
    {0, 43500},
    {90, 45000},
    {0, 46500},
    {180, 49500},
    {0, 52500},
    {180, 55500},
    {90, 57000},
    {180, 58500},
    {0, 61500},
    {180, 64500},
    {0, 67500},
    {90, 3000 + 67500},
    {0, 4500 + 67500},
    {180, 7500 + 67500},
    {0, 9000 + 67500},
    {180, 10500 + 67500},
    {90, 12000 + 67500},
    {180, 13500 + 67500},
    {0, 16500 + 67500},
    {180, 18000 + 67500},
    {0, 19500 + 67500},
    {90, 3000 + 87000},
    {0, 4500 + 87000},
    {180, 7500 + 87000},
    {0, 9000 + 87000},
    {180, 10500 + 87000},
    {90, 12000 + 87000},
    {180, 13500 + 87000},
    {0, 16500 + 87000},
    {180, 18000 + 87000},
    {0, 19500 + 87000},
    {90, 3000 + 106500},
    {0, 4500 + 106500},
    {180, 7500 + 106500},
    {0, 9000 + 106500},
    {180, 10500 + 106500},
    {90, 12000 + 106500},
    {180, 13500 + 106500},
    {0, 16500 + 106500},
    {180, 18000 + 106500},
    {0, 19500 + 106500},
    {90, 3000 + 126000},
    {0, 4500 + 126000},
    {180, 7500 + 126000},
    {0, 9000 + 126000},
    {180, 10500 + 126000},
    {90, 12000 + 126000},
    {180, 13500 + 126000},
    {0, 16500 + 126000},
    {180, 18000 + 126000},
    {0, 19500 + 126000},
    {90, 3000 + 145500},
    {0, 4500 + 145500},
    {180, 7500 + 145500},
    {0, 9000 + 145500},
    {180, 10500 + 145500},
    {90, 12000 + 145500},
    {180, 13500 + 145500},
    {0, 16500 + 145500},
    {180, 18000 + 145500},
    {0, 19500 + 145500},
    {90, 3000 + 165000},
    {0, 4500 + 165000},
    {180, 7500 + 165000},
    {0, 9000 + 165000},
    {180, 10500 + 165000},
    {90, 12000 + 165000},
    {180, 13500 + 165000},
    {0, 16500 + 165000},
    {180, 18000 + 165000},
    {0, 19500 + 165000},
    {90, 3000 + 184500},
    {0, 4500 + 184500},
    {180, 7500 + 184500},
    {0, 9000 + 184500},
    {180, 10500 + 184500},
    {90, 12000 + 184500},
    {180, 13500 + 184500},
    {0, 16500 + 184500},
    {180, 18000 + 184500},
    {0, 19500 + 184500},
    {90, 3000 + 204000},
    {0, 4500 + 204000},
    {180, 7500 + 204000},
    {0, 9000 + 204000},
    {180, 10500 + 204000},
    {90, 12000 + 204000},
    {180, 13500 + 204000},
    {0, 16500 + 204000},
    {180, 18000 + 204000},
    {0, 19500 + 204000},
    {90, 3000 + 223500},
    {0, 4500 + 223500},
    {180, 7500 + 223500},
    {0, 9000 + 223500},
    {180, 10500 + 223500},
    {90, 12000 + 223500},
    {180, 13500 + 223500},
    {0, 16500 + 223500},
    {180, 18000 + 223500},
    {0, 19500 + 223500},
    {90, 3000 + 243000},
    {0, 4500 + 243000},
    {180, 7500 + 243000},
    {0, 9000 + 243000},
    {180, 10500 + 243000},
    {90, 12000 + 243000},
    {180, 13500 + 243000},
    {0, 16500 + 243000},
    {180, 18000 + 243000},
    {0, 19500 + 243000},
    {90, 3000 + 262500},
    {0, 4500 + 262500},
    {180, 7500 + 262500},
    {0, 9000 + 262500},
    {180, 10500 + 262500},
    {90, 12000 + 262500},
    {180, 13500 + 262500},
    {0, 16500 + 262500},
    {180, 18000 + 262500},
    {0, 19500 + 262500}
    // angle , millis

};
void PlayMotion() {
    int currentAngle;
    int direction;
    float interval;
    float totalMillis = 0;
    for (int j = 1; j < int(sizeof(motion_mg) / sizeof(motion_mg[0])); j++) {
        currentAngle = motion_mg[j - 1][0];
        direction = motion_mg[j][0] > currentAngle ? 1 : -1;

        float sisa = 0;
        for (int i = currentAngle; i != motion_mg[j][0]; i += direction) {
            interval = 1.00 + (motion_mg[j][1] - motion_mg[j - 1][1]) / abs(motion_mg[j][0] - currentAngle);
            sisa += interval - int(interval);
            if (sisa >= 1.00) {
                sisa -= 1.00;
                interval += 1.00;
            }
            totalMillis += interval;
        }
    }
    cout << totalMillis << endl;
}

int main() {
    int a[10] = {5, 3, 4, 9, 12, 14, 12, 9, 4, 3};
    int *p = a;
    int *q = &a[9];

    while (p < q) {
        cout << p << " 1 " << q << endl;
        cout << *p << " 2 " << *q << endl;
        cout << &p << " 3 " << &q << endl;
        *q += *p;
        p++;
        q--;
    }

    for (int i = 0; i < 10; i++) {
        cout << a[i] << " ";
    }

    return 0;
}